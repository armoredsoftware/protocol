{-# LANGUAGE OverloadedStrings #-}

module ScottyCA where

import Web.Scotty
import Data.ByteString.Lazy (ByteString, append, empty, pack, toStrict, fromStrict)
import qualified Data.ByteString.Lazy.Char8 as L hiding (length)

import Data.Binary
import System.IO
import Crypto.Cipher.AES
import Control.Monad.Trans
import qualified Data.Text.Lazy as LazyText
import Data.Monoid (mconcat)
import qualified Data.Text.Lazy.Encoding as LazyEncoding
import qualified Demo3SharedNOVCHAN as AD  --ArmoredData
import TPM

import Database.HDBC 
import Database.HDBC.Sqlite3


scottyCAMain = scotty 3000 $ do
    Web.Scotty.get "/" $ text "foobar"  --a quick way to check if the CA is serving, client should see "foobar" (Note: unqualified get is ambiguous).

    post "/" $ do
      --reads in "potential" request (parsing it could fail). Note: no en/de-crypting is yet taking place.
      a <- (param "request") :: ActionM LazyText.Text  
      liftIO $ putStrLn ("Received (Text):\n" ++ (show a)) --debug show of text received.
      liftIO $ putStrLn ("Received (UTF8):\n" ++ (show (LazyEncoding.encodeUtf8 a))) --debug printout.

      --first converts the Text to UTF8, then then attempts to read a CARequest
      let jj = AD.jsonEitherDecode (LazyEncoding.encodeUtf8 a) :: Either String AD.CARequest
      liftIO $ putStrLn ("JSON decoded CARequest result:\n" ++ (show jj)) --debug 

      case jj of
	   (Left err)    -> do
                             liftIO $ putStrLn ("Error decoding CARequest from JSON. Error was: " ++ err)    --report read error: console
                             text (LazyText.pack ("Error decoding CARequest from JSON. Error was: " ++ err)) --report read error: client
	   (Right caReq) -> do 
                             --json :: ToJSON a => a -> ActionM ()
                             --Set the body of the response to the JSON encoding of the given value. 
                             --Also sets "Content-Type" header to "application/json; charset=utf-8" if it has not already been set.
                             json caReq  --I think we can delete this. was for early testing (echoing). -paul
                             
                             --now that we have succesfully parsed a CARequest, let us attempt to formulate a CAResponse.
                             eitherCAResp <- liftIO $ handleCAReq caReq
                             case eitherCAResp of
                                (Left err) 	-> do
                                                     liftIO $ putStrLn ("Error formulating CAResponse. Error was: " ++ err)    --report error: console
                                                     text (LazyText.pack ("Error formulating CAResponse. Error was: " ++ err)) --report error: client
                                (Right caResp) 	-> do
                                                     json caResp 

   
handleCAReq :: AD.CARequest -> IO (Either String AD.CAResponse)
handleCAReq (AD.CARequest id (AD.Signed idContents idSig)) = do
  --try to find a pubkey associated with the given ID.
  eitherEKPubKey <- ekLookup id
  
  case (eitherEKPubKey) of
  	(Left err) -> return $ Left ("LOOKUP FAILURE. Error was: " ++ err)
  	(Right ekPubKey) -> do
		  let iPubKey = identityPubKey idContents
		      iDigest = tpm_digest $ encode iPubKey
		      asymContents = contents iDigest
		      blob = encode asymContents
		      encBlob =  tpm_rsa_pubencrypt ekPubKey blob
		      
		      caPriKey = snd AD.generateCAKeyPair  --TODO: this needs fixing. fix as in correct and fix as in stationary
		      caCert = AD.signPack caPriKey iPubKey
		      certBytes = encode caCert
		      
		      strictCert = toStrict certBytes
		      encryptedCert = encryptCTR aes ctr strictCert
		      enc = fromStrict encryptedCert
		      --encryptedSignedAIK = crypt' CTR symKey symKey Encrypt signedAIK  

		      --enc = encrypt key certBytes
		  return (Right (AD.CAResponse enc encBlob))
 where 
   symKey = 
     TPM_SYMMETRIC_KEY 
     (tpm_alg_aes128) 
     (tpm_es_sym_ctr) 
     key
   
   v:: Word8 
   v = 1
   key = ({-B.-}Data.ByteString.Lazy.pack $ replicate 16 v) 
   --strictKey = toStrict key
   aes = initAES $ toStrict key
   ctr = toStrict key
   contents dig = TPM_ASYM_CA_CONTENTS symKey dig

databaseName = "armoredDB.db"

ekLookup :: Int -> IO (Either String TPM_PUBKEY)
ekLookup my_id = do
                --putStrLn "beginning..." --debug
                conn <- connectSqlite3 databaseName
                res <- quickQuery' conn ("SELECT jsontpmkey from pubkeys where id =" ++ (show my_id)) []
                putStrLn ("Here is the result of the query:\n" ++ (show res) )
                case (length res) of
                     0 -> do 
                           return $ Left ("No entry found for given ID: " ++ (show my_id))
                     1 -> do
                           let res' = (res !! 0) !! 0
                           convertedRes = fromSql res' :: ByteString
                           putStrLn "bytestring version of tpmkey: "
                           putStrLn (show convertedRes)
                           let x = AD.jsonEitherDecode convertedRes :: Either String TPM_PUBKEY 
                           putStrLn "JSON decoded version of tpmkey: "
                           putStrLn (show x)
                           case x of
                                 (Left err) -> do 
                                                --putStrLn "Failed to get from DB properly. Error was: " ++ err
                                                return $ Left ("Failed to convert DB entry of key from JSON to Haskell type. Error was: " ++ err)
                                 (Right k) -> do 
                                                putStrLn "SUCCESS!-fully read the TPM_PUBKEY out of the sql db as json and converted to TPM_PUBKEY object"
                                                return $ Right k
                     x -> do
                            return $ Left ("Ambiguity error: Multiple entries found for given ID: " ++ (show my_id))
                            
--                 if (length res) < 1 then do return $ Left ("No entry in " ++ databaseName ++ " found for given ID: " ++ (show my_id))
--                  else do
--                   let res' = (res !! 0) !! 0
--                       convertedRes = fromSql res' :: ByteString
--                   putStrLn " Here is the bytestring version: "
--                   putStrLn (show convertedRes)
--                   let x = AD.jsonEitherDecode convertedRes :: Either String TPM_PUBKEY 
--                   putStrLn "Here is the JSON decoded version: "
--                   putStrLn (show x)
--                   case x of
--                         (Left err) -> do 
--                                         --putStrLn "Failed to get from DB properly. Error was: " ++ err
--                                         return (Left ("Failed to convert DB entry of key from JSON to Haskell type. Error was: " ++ err))
--                         (Right k) -> do 
--                                         putStrLn "SUCCESS!-fully read the TPM_PUBKEY out of the sql db as json and converted to TPM_PUBKEY object"
--                                         return (Right k)
                   --putStrLn "thats all for now"

readPubEK :: IO TPM_PUBKEY
readPubEK = do
  handle <- openFile AD.exportEKFileName ReadMode
  pubKeyString <- hGetLine handle
  let pubKey :: TPM_PUBKEY
      pubKey = read pubKeyString
  hClose handle
  return pubKey
  
  

