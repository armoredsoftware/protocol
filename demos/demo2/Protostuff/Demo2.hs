{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}
module Demo2 (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)
 
protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".Demo2\", haskellPrefix = [], parentModule = [], baseName = MName \"Demo2\"}, protoFilePath = [\"Demo2.hs\"], protoSource = \"demo2.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.ProtoRequest\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"ProtoRequest\"}, descFilePath = [\"Demo2\",\"ProtoRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.ProtoRequest.desiredEvidence\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"ProtoRequest\"], baseName' = FName \"desiredEvidence\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.DesiredEvidence\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"DesiredEvidence\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.ProtoRequest.tpmRequest\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"ProtoRequest\"], baseName' = FName \"tpmRequest\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.TPMRequest\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"TPMRequest\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.ProtoRequest.nonce\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"ProtoRequest\"], baseName' = FName \"nonce\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.Nonce\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Nonce\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.DesiredEvidence\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"DesiredEvidence\"}, descFilePath = [\"Demo2\",\"DesiredEvidence.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.DesiredEvidence.evidenceDescriptor\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"DesiredEvidence\"], baseName' = FName \"evidenceDescriptor\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.EvidenceDescriptor\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"EvidenceDescriptor\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.EvidenceDescriptor\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"EvidenceDescriptor\"}, descFilePath = [\"Demo2\",\"EvidenceDescriptor.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.EvidenceDescriptor.desc\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"EvidenceDescriptor\"], baseName' = FName \"desc\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 5}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.TPMRequest\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"TPMRequest\"}, descFilePath = [\"Demo2\",\"TPMRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.TPMRequest.body\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"TPMRequest\"], baseName' = FName \"body\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.Nonce\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Nonce\"}, descFilePath = [\"Demo2\",\"Nonce.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.Nonce.nonce\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"Nonce\"], baseName' = FName \"nonce\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.ProtoResponse\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"ProtoResponse\"}, descFilePath = [\"Demo2\",\"ProtoResponse.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.ProtoResponse.evidencePackage\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"ProtoResponse\"], baseName' = FName \"evidencePackage\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.EvidencePackage\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"EvidencePackage\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.ProtoResponse.quotePackage\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"ProtoResponse\"], baseName' = FName \"quotePackage\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.QuotePackage\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"QuotePackage\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.EvidencePackage\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"EvidencePackage\"}, descFilePath = [\"Demo2\",\"EvidencePackage.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.EvidencePackage.evidence\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"EvidencePackage\"], baseName' = FName \"evidence\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.Evidence\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Evidence\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.EvidencePackage.nonce\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"EvidencePackage\"], baseName' = FName \"nonce\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.Nonce\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Nonce\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.EvidencePackage.signature\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"EvidencePackage\"], baseName' = FName \"signature\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.Signature\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Signature\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.Evidence\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Evidence\"}, descFilePath = [\"Demo2\",\"Evidence.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.Evidence.evidencePiece\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"Evidence\"], baseName' = FName \"evidencePiece\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.EvidencePiece\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"EvidencePiece\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.EvidencePiece\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"EvidencePiece\"}, descFilePath = [\"Demo2\",\"EvidencePiece.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.EvidencePiece.constructor\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"EvidencePiece\"], baseName' = FName \"constructor\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.EvidencePiece.Constructor\", haskellPrefix = [], parentModule = [MName \"Demo2\",MName \"EvidencePiece\"], baseName = MName \"Constructor\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.EvidencePiece.bytesData\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"EvidencePiece\"], baseName' = FName \"bytesData\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.EvidencePiece.int32Data\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"EvidencePiece\"], baseName' = FName \"int32Data\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 24}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 5}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.EvidencePiece.doubleData\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"EvidencePiece\"], baseName' = FName \"doubleData\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 33}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 1}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.EvidencePiece.boolData\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"EvidencePiece\"], baseName' = FName \"boolData\"}, fieldNumber = FieldId {getFieldId = 5}, wireTag = WireTag {getWireTag = 40}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.EvidencePiece.stringData\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"EvidencePiece\"], baseName' = FName \"stringData\"}, fieldNumber = FieldId {getFieldId = 6}, wireTag = WireTag {getWireTag = 50}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.Signature\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Signature\"}, descFilePath = [\"Demo2\",\"Signature.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.Signature.signature\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"Signature\"], baseName' = FName \"signature\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.QuotePackage\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"QuotePackage\"}, descFilePath = [\"Demo2\",\"QuotePackage.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.QuotePackage.quote\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"QuotePackage\"], baseName' = FName \"quote\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.Quote\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Quote\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.QuotePackage.hash\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"QuotePackage\"], baseName' = FName \"hash\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.Hash\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Hash\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.QuotePackage.signature\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"QuotePackage\"], baseName' = FName \"signature\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.Signature\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Signature\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.Quote\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Quote\"}, descFilePath = [\"Demo2\",\"Quote.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.Quote.pcr\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"Quote\"], baseName' = FName \"pcr\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.PCR\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"PCR\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.Quote.nonce\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"Quote\"], baseName' = FName \"nonce\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.Nonce\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Nonce\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.Quote.signature\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"Quote\"], baseName' = FName \"signature\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Demo2.Signature\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Signature\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.PCR\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"PCR\"}, descFilePath = [\"Demo2\",\"PCR.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.PCR.pcr\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"PCR\"], baseName' = FName \"pcr\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Demo2.Hash\", haskellPrefix = [], parentModule = [MName \"Demo2\"], baseName = MName \"Hash\"}, descFilePath = [\"Demo2\",\"Hash.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Demo2.Hash.hash\", haskellPrefix' = [], parentModule' = [MName \"Demo2\",MName \"Hash\"], baseName' = FName \"hash\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False}], enums = [EnumInfo {enumName = ProtoName {protobufName = FIName \".Demo2.EvidencePiece.Constructor\", haskellPrefix = [], parentModule = [MName \"Demo2\",MName \"EvidencePiece\"], baseName = MName \"Constructor\"}, enumFilePath = [\"Demo2\",\"EvidencePiece\",\"Constructor.hs\"], enumValues = [(EnumCode {getEnumCode = 0},\"M0\"),(EnumCode {getEnumCode = 1},\"M1\"),(EnumCode {getEnumCode = 2},\"M2\"),(EnumCode {getEnumCode = 3},\"M3\")]}], knownKeyMap = fromList []}"
 
fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\198\b\n\vdemo2.proto\"\131\SOH\n\fProtoRequest\DC2/\n\SIdesiredEvidence\CAN\SOH \SOH(\v2\SYN.Demo2.DesiredEvidence\DC2%\n\ntpmRequest\CAN\STX \SOH(\v2\DC1.Demo2.TPMRequest\DC2\ESC\n\ENQnonce\CAN\ETX \SOH(\v2\f.Demo2.Nonce\"H\n\SIDesiredEvidence\DC25\n\DC2evidenceDescriptor\CAN\SOH \ETX(\v2\EM.Demo2.EvidenceDescriptor\"\"\n\DC2EvidenceDescriptor\DC2\f\n\EOTdesc\CAN\SOH \SOH(\ENQ\"\SUB\n\nTPMRequest\DC2\f\n\EOTbody\CAN\SOH \SOH(\f\"\SYN\n\ENQNonce\DC2\r\n\ENQnonce\CAN\SOH \SOH(\f\"k\n\rProtoResponse\DC2/\n\SIevidencePackage\CAN\SOH \SOH(\v2\SYN.Demo2.EvidencePackage\DC2)\n\fquotePackage\CAN\STX \SOH(\v2\DC3.Demo2.QuotePackage\"v\n\SIEvidencePackage\DC2!\n\bevidence\CAN\SOH \SOH(\v2\SI.Demo2.Evidence\DC2\ESC\n\ENQnonce\CAN\STX \SOH(\v2\f.Demo2.Nonce\DC2#\n\tsignature\CAN\ETX \SOH(\v2\DLE.Demo2.Signature\"7\n\bEvidence\DC2+\n\revidencePiece\CAN\SOH \ETX(\v2\DC4.Demo2.EvidencePiece\"\213\SOH\n\rEvidencePiece\DC25\n\vconstructor\CAN\SOH \SOH(\SO2 .Demo2.EvidencePiece.Constructor\DC2\DC1\n\tbytesData\CAN\STX \SOH(\f\DC2\DC1\n\tint32Data\CAN\ETX \SOH(\ENQ\DC2\DC2\n\ndoubleData\CAN\EOT \SOH(\SOH\DC2\DLE\n\bboolData\CAN\ENQ \SOH(\b\DC2\DC2\n\nstringData\CAN\ACK \SOH(\t\"-\n\vConstructor\DC2\ACK\n\STXM0\DLE\NUL\DC2\ACK\n\STXM1\DLE\SOH\DC2\ACK\n\STXM2\DLE\STX\DC2\ACK\n\STXM3\DLE\ETX\"\RS\n\tSignature\DC2\DC1\n\tsignature\CAN\SOH \SOH(\f\"k\n\fQuotePackage\DC2\ESC\n\ENQquote\CAN\SOH \SOH(\v2\f.Demo2.Quote\DC2\EM\n\EOThash\CAN\STX \SOH(\v2\v.Demo2.Hash\DC2#\n\tsignature\CAN\ETX \SOH(\v2\DLE.Demo2.Signature\"b\n\ENQQuote\DC2\ETB\n\ETXpcr\CAN\SOH \ETX(\v2\n.Demo2.PCR\DC2\ESC\n\ENQnonce\CAN\STX \SOH(\v2\f.Demo2.Nonce\DC2#\n\tsignature\CAN\ETX \SOH(\v2\DLE.Demo2.Signature\"\DC2\n\ETXPCR\DC2\v\n\ETXpcr\CAN\SOH \SOH(\f\"\DC4\n\EOTHash\DC2\f\n\EOThash\CAN\SOH \SOH(\f")